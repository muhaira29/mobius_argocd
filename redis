kind: Service
apiVersion: v1
metadata:
  name: redis
  namespace: test-argocd
  labels:
    app: redis
spec:
  ports:
  - name: redis
    protocol: TCP
    port: 6379
    targetPort: 6379
    nodePort: 6384
  selector:
    app: redis
  type: NodePort
  sessionAffinity: None
  externalTrafficPolicy: Cluster
status:
  loadBalancer: {}


---
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: redis
  namespace: test-argocd
  labels:
    app: redis
spec:
  replicas: 0
  selector:
    matchLabels:
      app: redis
  template:
    metadata: 
      labels:
        app: redis
    spec:
      volumes:
      - name: timezone-config
        hostPath:
          path: /etc/timezone
          type: ''
      - name: localtime-config
        hostPath:
          path: /etc/localtime
          type: ''
      - name: redis-config
        configMap:
          name: redis-config
          defaultMode: 384
      containers:
      - name: redis
        image: redis:5.0.5
        command:
        - redis-server
        - "/opt/redis.conf"
        ports:
        - containerPort: 6379
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 4096M
          requests:
            cpu: 500m
            memory: 4096M
        volumeMounts:
        - name: redis-config
          mountPath: /opt/redis.conf
          subPath: redis.conf
        - name: timezone-config
          mountPath: /etc/timezone
        - name: localtime-config
          mountPath: /etc/localtime
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 180
          timeoutSeconds: 1
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 5
          timeoutSeconds: 180
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        terminationMessagePath: "/dev/termination-log"
        terminationMessagePolicy: File
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
          procMount: Default
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      imagePullSecrets:
      - name: harbor-feuser
      schedulerName: default-scheduler
      tolerations:
      - key: dev
        operator: Equal
        value: env
        effect: NoSchedule
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
